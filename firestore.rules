rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(authorId) {
      return isSignedIn() && request.auth.uid == authorId;
    }

    /**
     * @description Allows anyone to read if published is true
     */
    function isPublished() {
        return resource.data.published == true;
    }

    /**
     * @description Defines the security rules for the /projects/{projectId} collection.
     * @path /projects/{projectId}
     * @allow (create) Allow user 'P2GcGewB82MHZtxIfR4PFr8eI323' to create a project with authorId 'P2GcGewB82MHZtxIfR4PFr8eI323'.
     * @deny (create) Deny user 'differentUserId' from creating a project with authorId 'P2GcGewB82MHZtxIfR4PFr8eI323'.
     * @allow (get, list) Allow anyone to read published projects.
     * @deny (update, delete) Deny unauthenticated users to delete projects.
     * @principle Allows public read access for published projects and restricts write access to the owner.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Defines the security rules for the /contacts/{contactId} collection.
     * @path /contacts/{contactId}
     * @deny (create) Deny any user (authenticated or not) from creating a contact message.
     * @deny (get, list, update, delete) Deny any user (authenticated or not) from reading, listing, updating, or deleting contact messages.
     * @principle Restricts all access to contact messages.
     */
    match /contacts/{contactId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // Disable contact submissions to prevent spam.  Remove this if you want to allow submissions, but consider adding validation.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines the security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) Allow a user to create their own profile if the UID matches.
     * @allow (get) Allow a user to get their own profile.
     * @deny (update, delete) Deny others to update or delete a user profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // disable listing all users
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if false; // Prevent users from deleting their profiles via rules.
    }
  }
}