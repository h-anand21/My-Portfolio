/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a portfolio application.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project data. Publicly readable if 'published' is true, otherwise only editable by admins.
 * - /contacts/{contactId}: Stores contact form submissions. Only admins can read or write.
 * - /roles_admin/{userId}:  Admin user roles.  The existence of a document in this collection grants admin privileges to the corresponding user.
 *
 * Key Security Decisions:
 * - Public read access to published projects.
 * - Admin-only access to create, update, and delete projects.
 * - Admin-only access to contact form submissions.
 * - Admin role is determined by the presence of a document in the `/roles_admin/{userId}` collection.
 * - User listing is disallowed for the `/roles_admin` collection to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * - The `published` field is stored directly in the `/projects/{projectId}` document. This allows for efficient public read access without requiring additional `get()` calls to check the publication status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in the /roles_admin/{userId} collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the resource, using their userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource, AND that the resource exists.  For update/delete operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    match /projects/{projectId} {
      /**
       * @description Allows public read access (get, list) to published projects, and restricts create, update, and delete to admins.
       * @path /projects/{projectId}
       * @allow (get, list) Anyone can read a published project.
       * @allow (create, update, delete) Only admins can modify projects.
       * @deny (create) A non-admin user cannot create a project.
       * @deny (update) A non-admin user cannot update a project.
       * @deny (delete) A non-admin user cannot delete a project.
       * @principle Public read, admin-only write.
       */
      allow get: if resource.data.published == true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    match /contacts/{contactId} {
      /**
       * @description Only admins can read, create, update, or delete contact form submissions.
       * @path /contacts/{contactId}
       * @allow (create) Only admins can create a contact (via the function).
       * @allow (get, list) Only admins can read contacts.
       * @deny (create) Non-admins cannot submit contact forms directly (should use the function).
       * @deny (get, list) Non-admins cannot read contact form submissions.
       * @principle Admin-only access.
       */
      allow create: if isAdmin();
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    match /roles_admin/{userId} {
      /**
       * @description Allows admins to manage their own role document. Used for authorization.  No listing allowed.
       * @path /roles_admin/{userId}
       * @allow (create) An admin can create their own role document.
       * @allow (get) An admin can read their own role document.
       * @deny (list) No one can list the admin roles (prevents discovery).
       * @deny (create) Non-admins cannot create an admin role document.
       * @deny (update) Only the user can update their own role document.
       * @deny (delete) Only the user can delete their own role document.
       * @principle Owner-only, authorization independence.
       */
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if false;
      allow delete: if isExistingOwner(userId);
    }
  }
}