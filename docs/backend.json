
{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project in the portfolio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project."
        },
        "title": {
          "type": "string",
          "description": "The title of the project."
        },
        "slug": {
          "type": "string",
          "description": "URL-friendly slug for the project (used in routes)."
        },
        "shortSummary": {
          "type": "string",
          "description": "A short summary of the project."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the project, potentially in Markdown format."
        },
        "tech": {
          "type": "array",
          "description": "An array of technologies used in the project.",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "description": "An array of tags associated with the project.",
          "items": {
            "type": "string"
          }
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "URL of the project thumbnail image.",
          "format": "uri"
        },
        "screenshots": {
          "type": "array",
          "description": "An array of URLs to project screenshots.",
          "items": {
            "type": "string"
          }
        },
        "githubUrl": {
          "type": "string",
          "description": "URL of the project's GitHub repository.",
          "format": "uri"
        },
        "demoUrl": {
          "type": "string",
          "description": "URL of the live demo of the project.",
          "format": "uri"
        },
        "published": {
          "type": "boolean",
          "description": "Indicates whether the project is published and visible on the public portfolio."
        },
        "publishedAt": {
          "type": "string",
          "description": "The date and time when the project was published.",
          "format": "date-time"
        },
        "authorId": {
            "type": "string",
            "description": "The UID of the user who created the project."
        }
      },
      "required": [
        "id",
        "title",
        "slug",
        "shortSummary",
        "description",
        "tech",
        "thumbnailUrl",
        "published",
        "authorId"
      ]
    },
    "Contact": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contact",
      "type": "object",
      "description": "Represents a contact form submission.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact message."
        },
        "name": {
          "type": "string",
          "description": "The name of the person submitting the form."
        },
        "email": {
          "type": "string",
          "description": "The email address of the person submitting the form.",
          "format": "email"
        },
        "message": {
          "type": "string",
          "description": "The message content."
        },
        "createdAt": {
          "type": "string",
          "description": "The date and time when the contact message was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "createdAt"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User Profile",
      "type": "object",
      "description": "Represents a user profile in the application.",
      "properties": {
        "uid": {
          "type": "string",
          "description": "The user's unique ID from Firebase Authentication."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The user's email address."
        },
        "displayName": {
          "type": "string",
          "description": "The user's display name."
        },
        "photoURL": {
          "type": "string",
          "format": "uri",
          "description": "URL of the user's profile picture."
        },
        "isAdmin": {
          "type": "boolean",
          "description": "Flag to indicate if the user has administrative privileges."
        }
      },
      "required": [
        "uid",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "google"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project data. The 'published' field controls public visibility.",
          "rules": {
            "read": "resource.data.published == true",
            "get": "isOwner(resource) || resource.data.published == true",
            "create": "isOwner(resource)",
            "update": "isOwner(resource)",
            "delete": "isOwner(resource)"
          },
          "params": [
            {
              "name": "projectId",
              "description": "Unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/contacts/{contactId}",
        "definition": {
          "entityName": "Contact",
          "schema": {
            "$ref": "#/backend/entities/Contact"
          },
          "description": "Stores contact form submissions.",
          "rules": {
            "read": false,
            "write": false,
            "create": true
          },
          "params": [
            {
              "name": "contactId",
              "description": "Unique identifier for the contact message."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores public-facing user profile information. The `isAdmin` flag is stored here to be checked by security rules.",
          "rules": {
            "read": true,
            "create": "request.auth.uid == userId",
            "update": "request.auth.uid == userId",
            "write": "request.auth.uid == userId"
          },
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user, matching their Firebase Auth UID."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support a public portfolio site with an admin interface for managing projects. The structure prioritizes authorization independence and supports secure list operations (QAPs). Authorization Independence is achieved by storing admin roles in a dedicated collection and securing project visibility via the `published` field, eliminating the need for `get()` calls in security rules. This design supports atomic operations and simplifies debugging.\n\nStructural Segregation is applied by storing projects in a single collection, with `published` determining visibility.  The admin role is checked via a dedicated `/roles_admin/{uid}` collection. This approach enforces a homogeneous security posture for projects, simplifying rules.\n\nAccess Modeling utilizes Path-Based ownership for admin roles (`/roles_admin/{uid}`).  The project's published state is stored directly within the project document, and Firestore security rules leverage this field to control read access for public users.\n\nData Clarity is ensured by using the explicit `published` boolean field to represent the project's visibility state. Standardized naming conventions are used (e.g., `publishedAt`)."
  }
}
